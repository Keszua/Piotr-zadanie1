{"version":3,"sources":["components/Post.js","components/App.js","serviceWorker.js","index.js"],"names":["Post","props","className","title","userId","body","App","state","posts","isLoaded","fetch","then","response","json","setState","prevState","catch","error","console","this","map","el","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAeeA,G,YAZF,SAAAC,GAAK,OAEd,wBAAIC,UAAU,QACV,6BACA,4BAAKD,EAAME,OADX,YAEUF,EAAMG,OAChB,6BACCH,EAAMI,SCgDAC,E,2MA/CbC,MAAQ,CACNC,MAAO,GACPC,UAAU,G,mFAGS,IAAD,OAClBC,MAZQ,gDAaPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAGJ,EAAKC,UAAU,SAAAC,GAAS,MAAK,CAE3BP,MAAM,GAAD,mBAAMO,EAAUP,OAAhB,CAAuBK,IAE5BJ,UAAU,SAUbO,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,4C,+BAO7B,IAAMT,EAAQW,KAAKZ,MAAMC,MAAMY,KAAI,SAAAC,GAAE,OAClC,kBAAC,EAAD,CAAMC,IAAKD,EAAGE,GAAInB,OAAQiB,EAAGjB,OAAQD,MAAOkB,EAAGlB,MAAOE,KAAMgB,EAAGhB,UAGnE,OACE,oCACE,wBAAIH,UAAU,QACXiB,KAAKZ,MAAME,SAAWD,EAAQ,wB,GAzCvBgB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.81c3cb4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Post.css\";\r\n\r\nconst Post = props => (\r\n    // <li>Cos tam</li>\r\n    <li className=\"post\">\r\n        <div>\r\n        <h3>{props.title}</h3>\r\n        User Id: {props.userId}  \r\n        <br/>  \r\n        {props.body} \r\n        </div>\r\n    </li>\r\n)\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Post from './Post';\r\n//import { render } from '@testing-library/react';\r\n\r\nconst API = 'https://jsonplaceholder.typicode.com/posts/1';   //jedne post\r\n//const API = 'https://jsonplaceholder.typicode.com/posts';   //wszystkie\r\n//const API = 'https://jsonplaceholder.typicode.com/posts?userId=1';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    posts: [],\r\n    isLoaded: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(API)\r\n    .then(response => response.json())\r\n    .then(json => {  \r\n      \r\n      //dla jednego postu:\r\n      this.setState( prevState => ({\r\n        //posts: prevState.posts.push(json),  //Dla czego takie dodawanie do tablicy nie działa?\r\n        posts: [...prevState.posts, json],    //to działa\r\n        //posts: prevState.posts.concat(arr), //to też działa\r\n        isLoaded: true\r\n      }))\r\n\r\n      //dla kilku postów:\r\n        // this.setState( {\r\n        //   posts: json,\r\n        //   isLoaded: true\r\n        // })\r\n        \r\n    })\r\n    .catch(error => console.error(\"Nie udało sie wczytać API\"))\r\n  }\r\n\r\n\r\n  render() {\r\n    //const posts = <Post />\r\n\r\n     const posts = this.state.posts.map(el => (\r\n        <Post key={el.id} userId={el.userId} title={el.title} body={el.body}/>\r\n       //<Post key={el.id} />\r\n       ))\r\n    return (\r\n      <>\r\n        <ul className=\"List\">\r\n          {this.state.isLoaded ? posts : \"Loading data...\"}\r\n    \r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}