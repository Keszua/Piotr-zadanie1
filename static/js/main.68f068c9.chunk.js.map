{"version":3,"sources":["components/Post.js","components/NestedList.js","components/App.js","serviceWorker.js","index.js"],"names":["PostBody","props","body","Post","state","show","handleToogleShow","console","log","setState","prevState","className","onClick","this","title","userId","React","Component","Posts","posts","map","el","key","id","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","NestedList","classes","useState","open","setOpen","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","userFilter","List","component","aria-labelledby","subheader","ListSubheader","lenPosts","ListItem","button","getNewPost","ListItemIcon","ListItemText","primary","getNew10Post","Collapse","in","timeout","unmountOnExit","role","undefined","dense","Checkbox","edge","tabIndex","disableRipple","inputProps","users","labelId","othersPos","App","postsWiew","isLoaded","quantity","filtr","nrPos","API","fetch","then","response","json","handleUserFilter","catch","error","forEach","filter","post","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68f068c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Post.css\";\r\n\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nconst PostBody = props => (\r\n    <>\r\n        <br/> \r\n        {/* User Id: {props.userId}   */}\r\n        <br/>\r\n        {props.body}\r\n    </>\r\n)\r\n\r\n\r\nclass Post extends React.Component {\r\n\r\n    state = {\r\n        show: false,\r\n    }\r\n \r\n    handleToogleShow = () => {\r\n        console.log(\"Przycisk\")\r\n        this.setState( prevState => ({\r\n             show: !prevState.show,\r\n        }))\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <li className=\"post\">\r\n                <div>\r\n                    <button onClick={this.handleToogleShow} > {this.state.show ? <ExpandLess /> : <ExpandMore />} \r\n                    </button>\r\n                    <strong>{this.props.title}</strong> User Id: {this.props.userId}  \r\n                    {this.state.show ? <PostBody userId={this.props.userId} body={this.props.body}  /> : null }\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst Posts = props => (\r\n\r\n    <ul className=\"List\">\r\n        {props.posts.map(el => (\r\n            <Post key={el.id} userId={el.userId} title={el.title} body={el.body}/>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nexport default Posts;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\n//import DraftsIcon from '@material-ui/icons/Drafts';\r\n//import SendIcon from '@material-ui/icons/Send';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n//import StarBorder from '@material-ui/icons/StarBorder';\r\n\r\n\r\n//import GetAppOutlinedIcon from '@material-ui/icons/GetAppOutlined';\r\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\r\nimport PermIdentitySharpIcon from '@material-ui/icons/PermIdentitySharp';\r\n\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n//import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n//import IconButton from '@material-ui/core/IconButton';\r\n//import CommentIcon from '@material-ui/icons/Comment';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(8),\r\n  },\r\n}));\r\n\r\nexport default function NestedList(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [checked, setChecked] = React.useState([0]);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n\r\n    console.log(\"newChecked\",newChecked);\r\n    props.userFilter(newChecked);\r\n  };\r\n\r\n\r\n  return (\r\n  <>    \r\n    <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      subheader={\r\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n          Pobranych wiadomiści: {props.lenPosts} \r\n        </ListSubheader>\r\n      }\r\n      className={classes.root}\r\n    >\r\n      <ListItem button onClick={props.getNewPost}>\r\n        <ListItemIcon>\r\n          <InboxIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Pobierz wiadomość\" />\r\n      </ListItem>\r\n\r\n      <ListItem button onClick={props.getNew10Post}>\r\n        <ListItemIcon>\r\n          <InboxIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Pobierz 10 wiadomości\" />\r\n      </ListItem>\r\n\r\n      {/* <ListItem button>\r\n        <ListItemIcon>\r\n          <DraftsIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Otwórz wszystkie\" />\r\n      </ListItem> */}\r\n\r\n      <ListItem button onClick={handleClick}>\r\n        <ListItemIcon>\r\n          <PeopleAltOutlinedIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Użytkownicy\" />\r\n        {open ? <ExpandLess /> : <ExpandMore />} \r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        \r\n        <List className={classes.root}>\r\n\r\n            <ListItem key='0' role={undefined} dense button onClick={handleToggle(0)}>\r\n                {/* <ListItemIcon> */}\r\n                    <PeopleAltOutlinedIcon />\r\n                {/* </ListItemIcon> */}\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        edge=\"start\"\r\n                        checked={checked.indexOf(0) !== -1}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                        inputProps={{ 'aria-labelledby': `checkbox-list-label-0` }}\r\n                    />\r\n                </ListItemIcon>\r\n                <ListItemText id={{'aria-labelledby': `checkbox-list-label-0`}} primary={`Wszyscy`} />\r\n            </ListItem>\r\n\r\n            {/* {[1, 2, 3, 4].map(value => { */}\r\n            {props.users.map(value => {\r\n                const labelId = `checkbox-list-label-${value}`;\r\n\r\n                return (\r\n                  <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\r\n                      {/* <ListItemIcon> */}\r\n                          <PermIdentitySharpIcon />\r\n                      {/* </ListItemIcon> */}\r\n                      <ListItemIcon>\r\n                      <Checkbox\r\n                          edge=\"start\"\r\n                          checked={checked.indexOf(value) !== -1}\r\n                          tabIndex={-1}\r\n                          disableRipple\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                      />\r\n                      </ListItemIcon>\r\n                      <ListItemText id={labelId} primary={`Użytkownik ${value}`} />\r\n                      {/* <ListItemSecondaryAction>\r\n                      <IconButton edge=\"end\" aria-label=\"comments\">\r\n                          <CommentIcon />\r\n                      </IconButton>\r\n                      </ListItemSecondaryAction> */}\r\n                  </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n\r\n        </Collapse>\r\n    </List>\r\n  </>\r\n  );\r\n\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Posts from './Post';\r\nimport NestedList from './NestedList';\r\n\r\n//import { render } from '@testing-library/react';\r\n\r\n//const API = 'https://jsonplaceholder.typicode.com/posts/1';   //jeden post\r\n//const API = 'https://jsonplaceholder.typicode.com/posts';   //wszystkie\r\n//const API = 'https://jsonplaceholder.typicode.com/posts?userId=1';\r\n\r\nlet othersPos = 0;\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    posts: [],        //wszystkie pobrane wiadomości\r\n    postsWiew: [],    //wiadomości do pokazania \r\n    isLoaded: false,  //pierwsze załadowanie postów\r\n    quantity: 0,      //ilość pobranych wiadomości\r\n    users: [],        //tablica z ilością \"User Id\"\r\n    filtr: [0],       //aktualne filtrowanie wiadomości względem użytkowników\r\n  }\r\n  \r\n  \r\n  getNewPost = () => {\r\n    let nrPos = this.state.quantity +1;\r\n    //console.log(\"post nr: \", nrPos);\r\n    const API = `https://jsonplaceholder.typicode.com/posts/${nrPos}`; \r\n    fetch(API)\r\n    .then(response => response.json())\r\n    .then(json => {  \r\n      //console.log(json);\r\n      json.open = false; //dodaje kolejną właściwość\r\n      //console.log(json);\r\n      this.setState( prevState => ({\r\n        posts: [...prevState.posts, json],\r\n        isLoaded: true,\r\n        quantity: prevState.quantity+1,\r\n      }))\r\n\r\n      if(this.state.users.indexOf(json.userId) === -1) {\r\n        this.setState( prevState => ({\r\n          users: [...prevState.users, json.userId],\r\n        }))\r\n      }\r\n\r\n      this.handleUserFilter(this.state.filtr);\r\n\r\n      if(othersPos) {\r\n        othersPos--\r\n        this.getNewPost()\r\n      }\r\n\r\n    })\r\n    .catch(error => console.error(\"Nie udało sie wczytać API\"))\r\n  }\r\n\r\n  getNew10Post= () => {\r\n    if(othersPos) return;\r\n    othersPos = 9;\r\n    this.getNewPost();\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   this.getNewPost();\r\n  // }\r\n\r\n  handleUserFilter = (filtr) => {\r\n    //console.log(filtr);\r\n    if(filtr.indexOf(0) > -1) {\r\n      //console.log(\"Jest 0\");\r\n      this.setState( prevState => ({\r\n        postsWiew : prevState.posts,\r\n      }))\r\n      return;\r\n    }\r\n\r\n    let postsWiew = [];\r\n\r\n    filtr.forEach((el)=> {\r\n      if(filtr.indexOf(el) > -1) { //jeżeli istnieje element w tablicy\r\n        //console.log(\"Jest\", el);\r\n        postsWiew = [...postsWiew, ...this.state.posts.filter(post => post.userId === el)]\r\n        //console.log(postsWiew);\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n       postsWiew,\r\n       filtr,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    //const newPosts = this.state.posts.filter(post => post.open === true)\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"left-menu\">\r\n          <NestedList \r\n            getNewPost={this.getNewPost}\r\n            getNew10Post={this.getNew10Post}\r\n            lenPosts={this.state.posts.length}\r\n            users = {this.state.users}\r\n            userFilter = {this.handleUserFilter}\r\n          />\r\n        </div>\r\n        <div className=\"post-list\">\r\n          <h3>Wyświetlanych wiadomosci: {this.state.postsWiew.length}</h3>\r\n          <Posts posts = {this.state.postsWiew}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}